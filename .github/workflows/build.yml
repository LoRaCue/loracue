name: Build LoRaCue Firmware

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check commit message format
      if: github.event_name == 'pull_request'
      run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.sha }} --verbose

  build:
    runs-on: ubuntu-latest
    needs: code-quality
    name: Build ${{ matrix.board }} Firmware
    
    strategy:
      matrix:
        board:
          - heltec_v3
          # - custom_v1  # Add future boards here
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0  # Full history for GitVersion
    
    - name: Setup .NET for GitVersion
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install GitVersion
      run: dotnet tool install --global GitVersion.Tool
    
    - name: Run GitVersion
      id: gitversion
      run: |
        dotnet-gitversion /output json > version.json
        VERSION=$(cat version.json | jq -r '.SemVer')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Install ESP-IDF
      uses: espressif/esp-idf-action@v1
      with:
        esp_idf_version: v5.5
        target: esp32s3
    
    - name: Build firmware for ${{ matrix.board }}
      shell: bash
      run: |
        . $IDF_PATH/export.sh
        # Board selection is automatic via BSP (currently only heltec_v3 implemented)
        idf.py build
    
    - name: Extract and log firmware manifest
      shell: bash
      run: |
        echo "=== Firmware Manifest ==="
        # Search for manifest in binary (magic: 0x4C524355 = "LRCU")
        python3 << 'EOF'
        import struct
        with open('build/loracue.bin', 'rb') as f:
            data = f.read(4096)  # Search first 4KB
            magic = 0x4C524355
            for i in range(len(data) - 60):
                if struct.unpack('<I', data[i:i+4])[0] == magic:
                    manifest_version = data[i+4]
                    board_id = data[i+8:i+24].decode('utf-8', errors='ignore').rstrip('\x00')
                    fw_version = data[i+24:i+56].decode('utf-8', errors='ignore').rstrip('\x00')
                    print(f"Board ID: {board_id}")
                    print(f"Firmware Version: {fw_version}")
                    print(f"Manifest Version: {manifest_version}")
                    break
        else:
            print("ERROR: No manifest found!")
            exit(1)
        EOF
    
    - name: Rename artifacts with board ID and version
      run: |
        VERSION="${{ steps.gitversion.outputs.version }}"
        BOARD="${{ matrix.board }}"
        mkdir -p artifacts
        cp build/loracue.bin "artifacts/loracue-${BOARD}-v${VERSION}.bin"
        cp build/loracue.elf "artifacts/loracue-${BOARD}-v${VERSION}.elf"
        cp build/bootloader/bootloader.bin "artifacts/bootloader-${BOARD}.bin"
        cp build/partition_table/partition-table.bin "artifacts/partition-table-${BOARD}.bin"
        
        # Create metadata file
        cat > "artifacts/loracue-${BOARD}-v${VERSION}.json" << EOF
        {
          "board_id": "${BOARD}",
          "version": "${VERSION}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}"
        }
        EOF
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: loracue-${{ matrix.board }}-${{ steps.gitversion.outputs.version }}
        path: artifacts/
        retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Create Release Assets
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create release archives
      run: |
        mkdir -p release
        cd artifacts
        # Create individual board archives
        for board_dir in loracue-*; do
          if [ -d "$board_dir" ]; then
            cd "$board_dir"
            zip -r "../../release/${board_dir}.zip" .
            cd ..
          fi
        done
        cd ..
        
        # Create combined release archive
        cd artifacts && zip -r ../release/loracue-all-boards-${{ github.sha }}.zip . && cd ..
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: loracue-release-${{ github.sha }}
        path: release/
        retention-days: 90
