name: Release LoRaCue Firmware

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean

jobs:
  version:
    runs-on: ubuntu-latest
    name: Calculate Version
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      major-minor-patch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      prerelease-tag: ${{ steps.gitversion.outputs.preReleaseTag }}
      is-prerelease: ${{ steps.gitversion.outputs.preReleaseTag != '' }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true

  build-matrix:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        board:
          - name: "heltec_v3"
            display_name: "Heltec LoRa V3"
            target: "esp32s3"
            description: "ESP32-S3 with SX1262 LoRa and SH1106 OLED"
    
    name: Build ${{ matrix.board.display_name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Install ESP-IDF
      uses: espressif/esp-idf-action@v1
      with:
        esp_idf_version: v5.5
        target: ${{ matrix.board.target }}
    
    - name: Build firmware
      shell: bash
      run: |
        . $IDF_PATH/export.sh
        echo "Building LoRaCue v${{ needs.version.outputs.version }} for ${{ matrix.board.display_name }}"
        idf.py build
    
    - name: Generate firmware package
      run: |
        mkdir -p release/${{ matrix.board.name }}
        
        # Copy firmware binaries
        cp build/loracue.bin release/${{ matrix.board.name }}/
        cp build/bootloader/bootloader.bin release/${{ matrix.board.name }}/
        cp build/partition_table/partition-table.bin release/${{ matrix.board.name }}/
        
        # Generate flash script
        cat > release/${{ matrix.board.name }}/flash.sh << 'EOF'
        #!/bin/bash
        # LoRaCue Firmware Flash Script
        # Board: ${{ matrix.board.display_name }}
        # Version: v${{ needs.version.outputs.version }}
        
        echo "Flashing LoRaCue v${{ needs.version.outputs.version }} to ${{ matrix.board.display_name }}"
        
        if ! command -v esptool.py &> /dev/null; then
            echo "Error: esptool.py not found. Install with: pip install esptool"
            exit 1
        fi
        
        esptool.py --chip ${{ matrix.board.target }} \
                   --port ${1:-/dev/ttyUSB0} \
                   --baud 921600 \
                   --before default_reset \
                   --after hard_reset \
                   write_flash -z \
                   --flash_mode dio \
                   --flash_freq 80m \
                   --flash_size 8MB \
                   0x0 bootloader.bin \
                   0x8000 partition-table.bin \
                   0x10000 loracue.bin
        
        echo "Flash complete! Device will restart automatically."
        EOF
        
        chmod +x release/${{ matrix.board.name }}/flash.sh
        
        # Generate Windows flash script
        cat > release/${{ matrix.board.name }}/flash.bat << 'EOF'
        @echo off
        REM LoRaCue Firmware Flash Script
        REM Board: ${{ matrix.board.display_name }}
        REM Version: v${{ needs.version.outputs.version }}
        
        echo Flashing LoRaCue v${{ needs.version.outputs.version }} to ${{ matrix.board.display_name }}
        
        where esptool.py >nul 2>nul
        if %ERRORLEVEL% NEQ 0 (
            echo Error: esptool.py not found. Install with: pip install esptool
            pause
            exit /b 1
        )
        
        set PORT=%1
        if "%PORT%"=="" set PORT=COM3
        
        esptool.py --chip ${{ matrix.board.target }} --port %PORT% --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size 8MB 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 loracue.bin
        
        echo Flash complete! Device will restart automatically.
        pause
        EOF
        
        # Generate README
        cat > release/${{ matrix.board.name }}/README.md << 'EOF'
        # LoRaCue Firmware v${{ needs.version.outputs.version }}
        
        **Board**: ${{ matrix.board.display_name }}  
        **Target**: ${{ matrix.board.target }}  
        **Description**: ${{ matrix.board.description }}  
        **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Installation
        
        ### Prerequisites
        ```bash
        pip install esptool
        ```
        
        ### Linux/macOS
        ```bash
        ./flash.sh [PORT]
        # Default port: /dev/ttyUSB0
        ```
        
        ### Windows
        ```cmd
        flash.bat [PORT]
        REM Default port: COM3
        ```
        
        ## Manual Flash
        ```bash
        esptool.py --chip ${{ matrix.board.target }} \
                   --port YOUR_PORT \
                   --baud 921600 \
                   write_flash -z \
                   --flash_mode dio \
                   --flash_freq 80m \
                   --flash_size 8MB \
                   0x0 bootloader.bin \
                   0x8000 partition-table.bin \
                   0x10000 loracue.bin
        ```
        
        ## Verification
        After flashing, the device should:
        1. Boot and show LoRaCue logo on OLED
        2. Status LED should fade (breathing effect)
        3. Buttons should make LED solid when pressed
        
        ## Support
        - Documentation: https://github.com/metaneutrons/LoRaCue
        - Issues: https://github.com/metaneutrons/LoRaCue/issues
        EOF
    
    - name: Create firmware archive
      run: |
        cd release
        zip -r loracue-${{ matrix.board.name }}-v${{ needs.version.outputs.version }}.zip ${{ matrix.board.name }}/
    
    - name: Upload firmware package
      uses: actions/upload-artifact@v4
      with:
        name: loracue-${{ matrix.board.name }}-v${{ needs.version.outputs.version }}
        path: release/loracue-${{ matrix.board.name }}-v${{ needs.version.outputs.version }}.zip
        retention-days: 90

  generate-changelog:
    runs-on: ubuntu-latest
    needs: version
    name: Generate Release Notes
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: |
          {
            "categories": [
              {
                "title": "## 🚀 Features",
                "labels": ["feat", "feature"]
              },
              {
                "title": "## 🐛 Bug Fixes", 
                "labels": ["fix", "bugfix"]
              },
              {
                "title": "## 📚 Documentation",
                "labels": ["docs", "documentation"]
              },
              {
                "title": "## 🔧 Technical Changes",
                "labels": ["refactor", "perf", "build", "ci", "chore"]
              }
            ],
            "template": "#{{CHANGELOG}}\n\n## 📋 All Changes\n#{{UNCATEGORIZED}}",
            "pr_template": "- #{{TITLE}} (#{{NUMBER}})",
            "empty_template": "- No changes in this release",
            "transformers": [
              {
                "pattern": "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\\(.+\\))?: (.+)$",
                "target": "$3"
              }
            ]
          }
        toTag: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    runs-on: ubuntu-latest
    needs: [version, build-matrix, generate-changelog]
    name: Create GitHub Release
    
    steps:
    - name: Download all firmware packages
      uses: actions/download-artifact@v4
      with:
        path: firmware-packages/
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find firmware-packages -name "*.zip" -exec cp {} release-assets/ \;
        ls -la release-assets/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.version.outputs.version }}
        name: LoRaCue v${{ needs.version.outputs.version }}
        body: |
          # LoRaCue v${{ needs.version.outputs.version }}
          
          Enterprise LoRa presentation clicker firmware release.
          
          ## 📦 Supported Boards
          
          | Board | Target | Description |
          |-------|--------|-------------|
          | Heltec LoRa V3 | ESP32-S3 | SX1262 LoRa + SH1106 OLED |
          
          ## 📥 Installation
          
          1. Download the firmware package for your board
          2. Extract the ZIP file
          3. Run the flash script for your platform:
             - **Linux/macOS**: `./flash.sh`
             - **Windows**: `flash.bat`
          
          ## 🔄 Changelog
          
          ${{ needs.generate-changelog.outputs.changelog }}
          
          ## 🛠️ Technical Details
          
          - **ESP-IDF**: v5.5
          - **Build Date**: ${{ github.run_id }}
          - **Commit**: ${{ github.sha }}
          
          ---
          
          **Made with ❤️ in Hannover by MetaNeutrons**
        files: release-assets/*
        prerelease: ${{ needs.version.outputs.is-prerelease == 'true' || github.event.inputs.prerelease == 'true' }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
