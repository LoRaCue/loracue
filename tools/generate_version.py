#!/usr/bin/env python3
"""
GitVersion integration for ESP-IDF build system
Generates version.h header with GitVersion information
"""

import json
import subprocess
import sys
import os
from pathlib import Path

def run_gitversion():
    """Run GitVersion and return parsed JSON output"""
    try:
        result = subprocess.run(['gitversion'], 
                              capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Warning: GitVersion not found, using fallback version")
        return {
            "Major": 0,
            "Minor": 1,
            "Patch": 0,
            "SemVer": "0.1.0-dev",
            "FullSemVer": "0.1.0-dev",
            "InformationalVersion": "0.1.0-dev+unknown",
            "BranchName": "unknown",
            "Sha": "unknown",
            "ShortSha": "unknown",
            "CommitDate": "1970-01-01"
        }

def generate_version_header(version_info, output_path):
    """Generate version.h header file"""
    header_content = f'''/**
 * @file version.h
 * @brief Auto-generated version information from GitVersion
 * 
 * This file is automatically generated during build.
 * Do not edit manually.
 */

#pragma once

#ifdef __cplusplus
extern "C" {{
#endif

// Version numbers
#define LORACUE_VERSION_MAJOR       {version_info["Major"]}
#define LORACUE_VERSION_MINOR       {version_info["Minor"]}
#define LORACUE_VERSION_PATCH       {version_info["Patch"]}

// Version strings
#define LORACUE_VERSION_STRING      "{version_info["SemVer"]}"
#define LORACUE_VERSION_FULL        "{version_info["FullSemVer"]}"
#define LORACUE_VERSION_INFO        "{version_info["InformationalVersion"]}"

// Build information
#define LORACUE_BUILD_BRANCH        "{version_info["BranchName"]}"
#define LORACUE_BUILD_COMMIT        "{version_info["Sha"]}"
#define LORACUE_BUILD_COMMIT_SHORT  "{version_info["ShortSha"]}"
#define LORACUE_BUILD_DATE          "{version_info["CommitDate"]}"

// Convenience macros
#define LORACUE_VERSION_AT_LEAST(major, minor, patch) \\
    ((LORACUE_VERSION_MAJOR > (major)) || \\
     (LORACUE_VERSION_MAJOR == (major) && LORACUE_VERSION_MINOR > (minor)) || \\
     (LORACUE_VERSION_MAJOR == (major) && LORACUE_VERSION_MINOR == (minor) && LORACUE_VERSION_PATCH >= (patch)))

#ifdef __cplusplus
}}
#endif
'''
    
    # Ensure output directory exists
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    # Write header file
    with open(output_path, 'w') as f:
        f.write(header_content)
    
    print(f"Generated version header: {output_path}")
    print(f"Version: {version_info['SemVer']}")

def main():
    if len(sys.argv) != 2:
        print("Usage: generate_version.py <output_path>")
        sys.exit(1)
    
    output_path = sys.argv[1]
    
    # Get version information from GitVersion
    version_info = run_gitversion()
    
    # Generate header file
    generate_version_header(version_info, output_path)

if __name__ == "__main__":
    main()
